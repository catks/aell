require 'net/ssh/multi'
require 'optparse'
require 'aell/version'
require 'aws-sdk-ec2'

AWS_ACCESS_KEY_ID = ENV['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = ENV['AWS_SECRET_ACCESS_KEY']
AWS_REGION = ENV['AWS_REGION']
AWS_SESSION_TOKEN = ENV['AWS_SESSION_TOKEN']

Signal.trap("INT") { exit 2 }

def verify_options!(options)
  error('Missing user "-u my_user"') unless options[:user]
  error('Missing tag "-t some_tag:example" or hosts "-h 10.0.0.1,my_domain.intra"') unless options[:tag] || options[:hosts]
  error('Missing command "-c some_command"') unless options[:command]
end

def error(message)
  $stderr.puts "[ERROR] #{message}"
  exit 1
end

def parse_tags(tags)
  tag, values = tags.split(':')
  parsed_values = values.split(',')

  [tag, parsed_values]
end

def get_servers_ips(tag:, **aws_options)
  tag_name, values = parse_tags(tag)
  ec2_client = Aws::EC2::Client.new(**aws_options.compact)
  ec2 = Aws::EC2::Resource.new(client: ec2_client)
  ec2.instances({
    filters:
      [{
        name: "tag:#{tag_name}",
        values: values
      }]
    })
  .collect { |i| i.private_ip_address }.compact

rescue Aws::EC2::Errors::AuthFailure, Aws::Errors::Unauthorized => ex
  error(ex.message)
rescue Interrupt
  exit 2
end

options = {
  access_key_id: AWS_ACCESS_KEY_ID,
  secret_access_key: AWS_SECRET_ACCESS_KEY,
  session_token: AWS_SESSION_TOKEN,
  region: AWS_REGION,
}

class Hash
  def except(*keys)
    self.reject { |k,v| keys.include?(k) }
  end
end

OptionParser.new do |opts|
  opts.banner = <<-BANNER
Aell - Run commands in multiple servers querying by your AWS Infrastructure

Usage: aell -t some_tag:some_value -u ssh_user -c some_command

BANNER

  opts.on("-t", "--tag TAG",
          "AWS tags to search servers(you can specify more than one value with `,`)") do |tag|
    options[:tag] = tag
  end

  opts.on("--hosts 'some.domain,10.0.0.1'",
          "specify the hosts to run the command(Separated by `,`)") do |hosts|
    options[:hosts] = hosts.split(',')
  end

  opts.on("-c", "--command COMMAND", "Command to run in the servers") do |command|
    options[:command] = command
  end

  opts.on("-u", "--user USER", "User to connect in the servers") do |user|
    options[:user] = user
  end

  opts.on("-v", "--version", "Shows aell version") do
    puts Aell::VERSION
    exit
  end

  opts.on("--access_key_id ACCESS_KEY_ID", "Sets the AWS ACCESS_KEY_ID") do |access_key_id|
    options[:access_key_id] = access_key_id
  end

  opts.on("--secret_access_key SECRET_ACCESS_KEY", "Sets the AWS SECRET_ACCESS_KEY") do |secret_access_key|
    options[:secret_access_key] = secret_access_key
  end

  opts.on("--region REGION", "Sets the REGION") do |region|
    options[:region] = region
  end

  opts.on("--profile PROFILE", "Sets the profile (using ~/.aws/credentials), overrides --access_key_id, --secret_access_key, --region, --session_token options and environment variables") do |profile|
    options[:profile] = profile
    options.reject! { |k, v| [:access_key_id, :secret_access_key, :region, :session_token].include?(k) }
  end

  opts.on("--session-token SESSION_TOKEN ", "Sets the session token when using AWS MFA") do |session_token|
    options[:session_token] = session_token
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

verify_options!(options)

servers = options[:hosts] || get_servers_ips(**options.except(:user, :hosts, :command))

begin
  Thread.report_on_exception = false
  Net::SSH::Multi.start do |session|
    servers.each do |server|
      session.use(options[:user] ? "#{options[:user]}@#{server}" : server)
    end

    session.exec options[:command]
  end

rescue Net::SSH::ConnectionTimeout => e
  error("Error: Can't connect to hosts #{servers}")
end
